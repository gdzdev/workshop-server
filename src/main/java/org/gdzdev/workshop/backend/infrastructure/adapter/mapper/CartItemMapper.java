package org.gdzdev.workshop.backend.infrastructure.adapter.mapper;

import java.util.ArrayList;
import java.util.List;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.gdzdev.workshop.backend.domain.model.Cart;
import org.gdzdev.workshop.backend.domain.model.CartItem;
import org.gdzdev.workshop.backend.infrastructure.adapter.entity.CartEntity;
import org.gdzdev.workshop.backend.infrastructure.adapter.entity.CartItemEntity;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class CartItemMapper {
    private final ProductEntityMapper productMapper;

    public CartItem toDomain(CartItemEntity entity) {
        if (entity == null) return null;

        log.info("CartItemEntity ðŸ’¸: " + entity.getProduct().getName());
        return CartItem.builder()
                .id(entity.getId())
                .quantity(entity.getQuantity())
                .subtotal(entity.getSubTotal())
                .unitPrice(entity.getUnitPrice())
                .product(productMapper.toModel(entity.getProduct()))
                // Only map cart if it exists in the entity and is relevant for the domain model
                // .cart(entity.getCart() != null ? Cart.builder().id(entity.getCart().getId()).build() : null) // Example if you want to map cart ID
                .build();
    }


    // This method is for mapping a CartItem domain object to a CartItemEntity
    // for a new purchase. The 'cart' field of CartItem will be null.
    public CartItemEntity toEntity(CartItem domain) { // Simplified method, no 'cartEntity' parameter
        if (domain == null) return null;

        CartItemEntity entity = new CartItemEntity();
        entity.setId(domain.getId()); // For new creation, ID might be null or generated by DB
        entity.setQuantity(domain.getQuantity());
        entity.setSubTotal(domain.getSubTotal());
        entity.setUnitPrice(domain.getUnitPrice());
        entity.setProduct(productMapper.toEntity(domain.getProduct()));
        // IMPORTANT: Do NOT try to access domain.getCart() here to set entity.setCart()
        // for purchase items, as domain.getCart() will be null.
        // The CartItemEntity's 'cart' field should be set based on your persistence
        // strategy or remain null if not applicable for a purchase.
        // If CartItemEntity has a 'purchase' field, that's where the link is made.
        // For new purchase items, the 'cart' field in CartItemEntity should typically be null.


        // el error ocurre aqui
        entity.setCart(null); // Explicitly set to null for new purchase items to avoid issues if not mapped
        return entity;
    }

    // If you still need a method to map an existing CartItem *with* its Cart, keep this (carefully):
    public CartItemEntity toEntity(CartItem domain, CartEntity cartEntity) {
        CartItemEntity entity = new CartItemEntity();
        entity.setId(domain.getId());
        entity.setQuantity(domain.getQuantity());
        entity.setSubTotal(domain.getSubTotal());
        entity.setUnitPrice(domain.getUnitPrice());
        entity.setProduct(productMapper.toEntity(domain.getProduct()));
        entity.setCart(cartEntity); // Here, cartEntity is provided and expected to be non-null if used.
        return entity;
    }

    public List<CartItemEntity> toList(List<CartItem> models) {
        if (models == null) return new ArrayList<>();
        return models.stream()
                .map(this::toEntity)
                .toList();
    }
}